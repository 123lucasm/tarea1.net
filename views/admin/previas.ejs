<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestión de Previas - MATRICULATEC</title>
    
    <!-- Tailwind CSS Local -->
    <link rel="stylesheet" href="/css/tailwind.css">
    <!-- Admin CSS Personalizado -->
    <link rel="stylesheet" href="/css/admin.css">
    <!-- FontAwesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    <!-- SweetAlert2 -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700;800&display=swap" rel="stylesheet">
    <!-- Socket.IO -->
    <script src="/socket.io/socket.io.js"></script>

    <!-- Estilos personalizados para SweetAlert2 -->
    <style>
        .swal2-popup-modern {
            border-radius: 20px !important;
            box-shadow: 0 25px 50px rgba(0, 0, 0, 0.25) !important;
            border: none !important;
            overflow: hidden !important;
        }
        .swal2-title-modern { 
            display: none !important; 
        }
        .swal2-html-container-modern { 
            margin: 0 !important; 
            padding: 0 !important; 
        }
        .swal2-confirm-modern {
            background: linear-gradient(135deg, #ef4444, #dc2626) !important;
            border: none !important;
            border-radius: 12px !important;
            padding: 12px 24px !important;
            font-weight: 600 !important;
            font-size: 14px !important;
            box-shadow: 0 4px 15px rgba(239, 68, 68, 0.3) !important;
            transition: all 0.3s ease !important;
        }
        .swal2-confirm-modern:hover {
            background: linear-gradient(135deg, #dc2626, #b91c1c) !important;
            transform: translateY(-2px) !important;
            box-shadow: 0 6px 20px rgba(239, 68, 68, 0.4) !important;
        }
        .swal2-cancel-modern {
            background: linear-gradient(135deg, #6b7280, #4b5563) !important;
            border: none !important;
            border-radius: 12px !important;
            padding: 12px 24px !important;
            font-weight: 600 !important;
            font-size: 14px !important;
            box-shadow: 0 4px 15px rgba(107, 114, 128, 0.3) !important;
            transition: all 0.3s ease !important;
        }
        .swal2-cancel-modern:hover {
            background: linear-gradient(135deg, #4b5563, #374151) !important;
            transform: translateY(-2px) !important;
            box-shadow: 0 6px 20px rgba(107, 114, 128, 0.4) !important;
        }
        .swal2-actions {
            gap: 12px !important;
            margin-top: 30px !important;
        }
        .swal2-backdrop {
            backdrop-filter: blur(8px) !important;
        }
        
        /* Estilos para select múltiple */
        select[multiple] {
            min-height: 120px;
            padding: 8px;
        }
        
        select[multiple] option {
            padding: 8px 12px;
            margin: 2px 0;
            border-radius: 4px;
            background-color: #f8fafc;
            border: 1px solid #e2e8f0;
        }
        
        select[multiple] option:checked {
            background-color: #3b82f6;
            color: white;
            border-color: #2563eb;
        }
        
        select[multiple] option:hover {
            background-color: #e2e8f0;
        }
        
        select[multiple] option:checked:hover {
            background-color: #2563eb;
        }
        
        /* Estilos para el container de materias */
        #materias-container {
            background-color: #f8fafc;
            border: 2px dashed #cbd5e1;
            transition: border-color 0.3s ease;
        }
        
        #materias-container:hover {
            border-color: #94a3b8;
        }
        
        /* Estilos para las filas de materias */
        .materia-row {
            transition: all 0.2s ease;
        }
        
        .materia-row:hover {
            transform: translateY(-1px);
            box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
        }
        
        /* Estilos para checkboxes */
        .materia-checkbox {
            transform: scale(1.2);
            accent-color: #3b82f6;
        }
        
        /* Estilos para selects deshabilitados */
        .tipo-requisito:disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
        
        /* Animación para cuando se habilita un select */
        .tipo-requisito:not(:disabled) {
            animation: fadeIn 0.3s ease-in-out;
        }
        
        @keyframes fadeIn {
            from { opacity: 0.5; }
            to { opacity: 1; }
        }
    </style>
</head>
<body class="bg-utec-light font-inter">
    <!-- Navigation -->
    <nav class="admin-nav">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="flex justify-between items-center h-20">
                <div class="nav-brand">
                    <div class="brand-icon">
                        <i class="fas fa-shield-alt text-white text-2xl"></i>
                    </div>
                    <div class="brand-text">
                        <h1>Panel Admin</h1>
                        <p>MATRICULATEC</p>
                    </div>
                </div>
                <div class="nav-user">
                    <div class="user-info">
                        <p class="user-name"><%= usuario.nombre %> <%= usuario.apellido %></p>
                        <p class="user-role">Administrador</p>
                    </div>
                    <div class="nav-actions">
                        <div class="connection-status" id="connection-status">
                            <div class="status-indicator" id="status-indicator"></div>
                            <span id="status-text">Conectando...</span>
                        </div>
                        <a href="/admin">
                            <i class="fas fa-tachometer-alt"></i>
                            <span>Dashboard</span>
                        </a>
                        <a href="/admin/usuarios">
                            <i class="fas fa-users"></i>
                            <span>Usuarios</span>
                        </a>
                        <a href="/admin/materias">
                            <i class="fas fa-book"></i>
                            <span>Materias</span>
                        </a>
                        <a href="/auth/logout">
                            <i class="fas fa-sign-out-alt"></i>
                            <span>Salir</span>
                        </a>
                    </div>
                </div>
            </div>
        </div>
    </nav>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <!-- Header Section -->
        <div class="mb-8">
            <div class="welcome-section">
                <div class="welcome-content">
                    <h1 class="welcome-title">
                        <i class="fas fa-link mr-4"></i>
                        Gestión de Previas
                    </h1>
                    <p class="welcome-subtitle">
                        Administra los requisitos académicos y prerrequisitos de las materias
                    </p>
                    <div class="welcome-info">
                        <div class="welcome-info-item">
                            <i class="fas fa-link"></i>
                            <span id="total-previas">0 materias con previas</span>
                        </div>


                    </div>
                </div>
            </div>
        </div>

        <!-- Stats Cards -->
        <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <!-- Total Materias con Previas -->
            <div class="stat-card amber">
                <div class="flex items-center justify-between mb-4">
                    <div class="stat-icon amber">
                        <i class="fas fa-link text-white text-xl"></i>
                    </div>
                    <div class="text-right">
                        <p class="stat-number" id="total-previas-count">0</p>
                        <p class="stat-label">materias</p>
                    </div>
                </div>
                <h3 class="stat-title">Materias con Previas</h3>
                <p class="stat-description">Total de materias que requieren previas</p>
            </div>

            <!-- Materias con Previas Activas -->
            <div class="stat-card emerald">
                <div class="flex items-center justify-between mb-4">
                    <div class="stat-icon emerald">
                        <i class="fas fa-check-circle text-white text-xl"></i>
                    </div>
                    <div class="text-right">
                        <p class="stat-number" id="previas-activas-count">0</p>
                        <p class="stat-label">activas</p>
                    </div>
                </div>
                <h3 class="stat-title">Materias Activas</h3>
                <p class="stat-description">Materias con previas vigentes</p>
            </div>

            <!-- Previas por Curso -->
            <div class="stat-card indigo">
                <div class="flex items-center justify-between mb-4">
                    <div class="stat-icon indigo">
                        <i class="fas fa-graduation-cap text-white text-xl"></i>
                    </div>
                    <div class="text-right">
                        <p class="stat-number" id="previas-curso-count">0</p>
                        <p class="stat-label">requisitos</p>
                    </div>
                </div>
                <h3 class="stat-title">Requisitos por Curso</h3>
                <p class="stat-description">Total de previas tipo curso</p>
            </div>

            <!-- Previas por Examen -->
            <div class="stat-card violet">
                <div class="flex items-center justify-between mb-4">
                    <div class="stat-icon violet">
                        <i class="fas fa-file-alt text-white text-xl"></i>
                    </div>
                    <div class="text-right">
                        <p class="stat-number" id="previas-examen-count">0</p>
                        <p class="stat-label">requisitos</p>
                    </div>
                </div>
                <h3 class="stat-title">Requisitos por Examen</h3>
                <p class="stat-description">Total de previas tipo examen</p>
            </div>
        </div>

        <!-- Filters and Search -->
            <div class="card-utec mb-8">
                <div class="flex flex-col lg:flex-row gap-4 items-center justify-between">
                    <div class="flex flex-col sm:flex-row gap-4 flex-1">
                        <!-- Search -->
                        <div class="relative flex-1">
                            <div class="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                                <i class="fas fa-search text-slate-400"></i>
                            </div>
                            <input type="text" id="search-previas" placeholder="Buscar por materia, código o previa requerida..." 
                                   class="w-full pl-10 pr-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500">
                        </div>
                        
                        <!-- Filter by Type -->
                        <select id="filter-tipo" class="px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500">
                            <option value="">Todos los tipos</option>
                            <option value="curso_aprobado">Curso Aprobado</option>
                            <option value="examen_aprobado">Examen Aprobado</option>
                        </select>
                        
                        <!-- Filter by Status -->
                        <select id="filter-estado" class="px-4 py-2 border border-slate-300 rounded-lg focus:ring-2 focus:ring-emerald-500 focus:border-emerald-500">
                            <option value="">Todos los estados</option>
                            <option value="true">Solo activas</option>
                            <option value="false">Solo inactivas</option>
                        </select>
                    </div>
                    
                    <!-- Actions -->
                    <div class="flex gap-3">
                        <button id="limpiar-filtros" class="btn-secondary">
                            <i class="fas fa-times"></i>
                            Limpiar
                        </button>
                        <button id="aplicar-filtros" class="btn-secondary">
                            <i class="fas fa-filter"></i>
                            Aplicar
                        </button>
                        <button class="btn-nueva-previa btn-success">
                            <i class="fas fa-plus mr-2"></i>
                            Nueva Previa
                        </button>
                    </div>
                </div>
            </div>

        <!-- Previas Table -->
        <div class="card-utec">
            <div class="overflow-x-auto">
                <table class="min-w-full divide-y divide-slate-200 previas-table">
                    <thead class="bg-slate-50">
                        <tr>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <i class="fas fa-book mr-2"></i>
                                    <span>Materia</span>
                                </div>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <i class="fas fa-link mr-2"></i>
                                    <span>Previas Requeridas</span>
                                </div>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <i class="fas fa-tag mr-2"></i>
                                    <span>Tipos</span>
                                </div>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <i class="fas fa-toggle-on mr-2"></i>
                                    <span>Estado</span>
                                </div>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <i class="fas fa-calendar-alt mr-2"></i>
                                    <span>Semestre</span>
                                </div>
                            </th>
                            <th class="px-6 py-3 text-left text-xs font-medium text-slate-500 uppercase tracking-wider">
                                <div class="flex items-center">
                                    <i class="fas fa-cog mr-2"></i>
                                    <span>Acciones</span>
                                </div>
                            </th>
                        </tr>
                    </thead>
                    <tbody id="previas-tbody" class="bg-white divide-y divide-slate-200">
                        <!-- Loading state -->
                        <tr id="loading-row">
                            <td colspan="6" class="px-6 py-12 text-center">
                                <div class="flex flex-col items-center">
                                    <i class="fas fa-spinner fa-spin text-4xl text-slate-400 mb-4"></i>
                                    <p class="text-slate-500">Cargando previas...</p>
                                </div>
                            </td>
                        </tr>
                    </tbody>
                </table>
            </div>
            
            <!-- Pagination Controls -->
            <div id="pagination-container" class="px-6 py-4 border-t border-slate-200 bg-slate-50">
                <div class="flex items-center justify-between">
                    <div class="flex items-center text-sm text-slate-700">
                        <span id="pagination-info">Mostrando 0 de 0 previas</span>
                    </div>
                    <div class="flex items-center space-x-2">
                        <button id="prev-page" class="px-3 py-1 text-sm bg-white border border-slate-300 rounded-md hover:bg-slate-50 disabled:opacity-50 disabled:cursor-not-allowed btn-pagina-prev">
                            <i class="fas fa-chevron-left"></i>
                        </button>
                        
                        <div id="page-numbers" class="flex space-x-1">
                            <!-- Page numbers will be generated here -->
                        </div>
                        
                        <button id="next-page" class="px-3 py-1 text-sm bg-white border border-slate-300 rounded-md hover:bg-slate-50 disabled:opacity-50 disabled:cursor-not-allowed btn-pagina-next">
                            <i class="fas fa-chevron-right"></i>
                        </button>
                    </div>
                </div>
            </div>
        </div>

    <!-- Modal Crear/Editar Previa -->
    <div id="modal-previa" class="modal hidden">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="modal-title">Nueva Previa</h3>
                <button class="modal-close btn-cerrar-modal-previa">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <form id="form-previa" class="modal-body">
                <div class="grid grid-cols-1 gap-4">
                    <div>
                        <label class="form-label">Materia</label>
                        <select id="materia" name="materia" class="form-select" required>
                            <option value="">Seleccionar materia</option>
                        </select>
                    </div>
                    <div>
                        <label class="form-label">Materias Requeridas</label>
                        <div id="materias-container" class="space-y-3 max-h-60 overflow-y-auto border border-gray-300 rounded-lg p-4">
                            <p class="text-sm text-gray-500">Selecciona las materias y su tipo de requisito:</p>
                            <!-- Las materias se agregarán dinámicamente aquí -->
                        </div>
                    </div>
                </div>
                <div class="flex items-center space-x-2 mt-4">
                    <input type="checkbox" id="activa" name="activa" class="form-checkbox" checked>
                    <label for="activa" class="form-label-checkbox">Previa activa</label>
                </div>
                <div class="modal-actions">
                    <button type="button" class="btn-secondary btn-cerrar-modal-previa">
                        Cancelar
                    </button>
                    <button type="submit" class="btn-primary">
                        <i class="fas fa-save mr-2"></i>
                        Guardar
                    </button>
                </div>
            </form>
        </div>
    </div>

    <!-- Modal para ver previas detalladas -->
    <div id="modal-previas-detalle" class="modal hidden">
        <div class="modal-content max-w-4xl">
            <div class="modal-header">
                <h3 class="text-lg font-semibold text-slate-900" id="modal-previas-titulo">
                    Previas Requeridas
                </h3>
                <button class="modal-close btn-cerrar-modal-detalle">
                    <i class="fas fa-times"></i>
                </button>
            </div>
            <div class="modal-body">
                <div id="previas-detalle-content" class="space-y-4">
                    <!-- El contenido se generará dinámicamente -->
                </div>
            </div>
            <div class="modal-actions">
                <button class="btn-secondary btn-cerrar-modal-detalle">
                    Cerrar
                </button>
            </div>
        </div>
    </div>

    <!-- JavaScript -->
    <script>
        let previas = [];
        let materias = [];
        let paginaActual = 1;
        let previasPorPagina = 10;
        let previasFiltradas = [];
        let handleEscape = null; // Variable global para el evento de teclado

        // Inicializar Socket.IO
        const socket = io();
        
        document.addEventListener('DOMContentLoaded', function() {
            cargarPrevias();
            cargarMaterias();
            configurarSocketEvents();
            configurarEventosModales();
            configurarEventosBotones();
        });
        
        function configurarSocketEvents() {
            socket.on('nueva-previa', function(data) {
                mostrarNotificacion('Nueva previa creada', `${data.materia.nombre} requiere ${data.previa.nombre}`);
                cargarPrevias();
            });
            
            socket.on('connect', function() {
                actualizarEstadoConexion('connected', 'Conectado');
            });
            
            socket.on('disconnect', function() {
                actualizarEstadoConexion('disconnected', 'Desconectado');
            });
        }

        function configurarEventosModales() {
            // Cerrar modal de previas detalladas al hacer clic fuera
            document.getElementById('modal-previas-detalle').addEventListener('click', function(e) {
                if (e.target === this) {
                    cerrarModalPreviasDetalle();
                }
            });
            
            // Cerrar modal de previa al hacer clic fuera
            document.getElementById('modal-previa').addEventListener('click', function(e) {
                if (e.target === this) {
                    cerrarModalPrevia();
                }
            });
        }

        function configurarEventosBotones() {
            // Delegación de eventos para los botones de la tabla
            document.addEventListener('click', function(e) {
                const target = e.target;
                
                // Botón Ver previas detalladas
                if (target.closest('.btn-ver-previas')) {
                    const button = target.closest('.btn-ver-previas');
                    const materiaId = button.getAttribute('data-materia-id');
                    verPreviasDetalle(materiaId);
                }
                
                // Botón Editar previa
                if (target.closest('.btn-editar-previa')) {
                    const button = target.closest('.btn-editar-previa');
                    const materiaId = button.getAttribute('data-materia-id');
                    editarPrevia(materiaId);
                }
                
                // Botón Toggle previa
                if (target.closest('.btn-toggle-previa')) {
                    const button = target.closest('.btn-toggle-previa');
                    const materiaId = button.getAttribute('data-materia-id');
                    const estadoActual = button.getAttribute('data-estado') === 'true';
                    togglePrevia(materiaId, estadoActual);
                }
                
                // Botón Eliminar previa
                if (target.closest('.btn-eliminar-previa')) {
                    const button = target.closest('.btn-eliminar-previa');
                    const materiaId = button.getAttribute('data-materia-id');
                    eliminarPrevia(materiaId);
                }
                
                // Botón Nueva Previa
                if (target.closest('.btn-nueva-previa')) {
                    abrirModalPrevia();
                }
                
                // Botones de cerrar modal de previas detalladas
                if (target.closest('.btn-cerrar-modal-detalle')) {
                    cerrarModalPreviasDetalle();
                }
                
                // Botones de cerrar modal de previa
                if (target.closest('.btn-cerrar-modal-previa')) {
                    cerrarModalPrevia();
                }
            });
            
            // Event listeners para filtros
            document.getElementById('search-previas').addEventListener('input', filtrarPrevias);
            document.getElementById('filter-tipo').addEventListener('change', filtrarPrevias);
            document.getElementById('filter-estado').addEventListener('change', filtrarPrevias);
            document.getElementById('limpiar-filtros').addEventListener('click', limpiarFiltros);
            document.getElementById('aplicar-filtros').addEventListener('click', aplicarFiltros);
            
            // Event listeners para paginación
            document.getElementById('prev-page').addEventListener('click', () => cambiarPagina(-1));
            document.getElementById('next-page').addEventListener('click', () => cambiarPagina(1));
            
            // Delegación de eventos para números de página
            document.addEventListener('click', function(e) {
                if (e.target.closest('.btn-pagina-numero')) {
                    const pagina = parseInt(e.target.getAttribute('data-pagina'));
                    irAPagina(pagina);
                }
            });
        }
        
        function actualizarEstadoConexion(estado, texto) {
            const indicator = document.getElementById('status-indicator');
            const statusText = document.getElementById('status-text');
            
            if (indicator && statusText) {
                indicator.className = `status-indicator ${estado}`;
                statusText.textContent = texto;
            }
        }

        async function cargarPrevias() {
            console.log('🔄 Cargando previas...');
            try {
                const response = await fetch('/admin/api/previas', {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('📦 Datos recibidos de la API:', data);
                console.log('🔍 Primera previa completa:', data[0]);
                
                if (data[0] && data[0].materia) {
                    console.log('🏫 Materia de la primera previa:', data[0].materia);
                    console.log('📅 Semestre de la materia:', data[0].materia.semestre);
                    console.log('📅 Tipo de semestre:', typeof data[0].materia.semestre);
                    
                    if (data[0].materia.semestre && typeof data[0].materia.semestre === 'object') {
                        console.log('📅 Nombre del semestre:', data[0].materia.semestre.nombre);
                        console.log('📅 Número del semestre:', data[0].materia.semestre.numero);
                        console.log('📅 Semestre completo:', data[0].materia.semestre);
                        console.log('📅 Keys del semestre:', Object.keys(data[0].materia.semestre));
                    } else {
                        console.log('❌ El semestre NO es un objeto:', data[0].materia.semestre);
                        console.log('❌ Tipo del semestre:', typeof data[0].materia.semestre);
                    }
                }
                
                previas = data;
                previasFiltradas = [...previas];
                
                actualizarEstadisticas();
                mostrarPrevias();
                
            } catch (error) {
                console.error('❌ Error cargando previas:', error);
                mostrarError('Error cargando previas: ' + error.message);
            }
        }

        async function cargarMaterias() {
            try {
                console.log('🔄 Cargando materias...');
                // Cargar todas las materias sin paginación
                const response = await fetch('/admin/api/materias?limit=1000', {
                    credentials: 'same-origin'
                });
                
                if (!response.ok) {
                    throw new Error(`Error del servidor: ${response.status}`);
                }
                
                const data = await response.json();
                console.log('📦 Datos de materias recibidos:', data);
                
                materias = data.materias || data;
                console.log('📚 Materias procesadas:', materias);
                console.log('📊 Cantidad de materias:', materias.length);
                
                // Llenar selectores del modal
                llenarSelectoresMaterias();
                
            } catch (error) {
                console.error('❌ Error cargando materias:', error);
            }
        }

        function llenarSelectoresMaterias() {
            console.log('🎨 Llenando selectores de materias...');
            const selectMateria = document.getElementById('materia');
            const materiasContainer = document.getElementById('materias-container');
            
            if (!selectMateria || !materiasContainer) {
                console.error('❌ No se encontraron los elementos del DOM');
                return;
            }
            
            // Limpiar opciones existentes
            selectMateria.innerHTML = '<option value="">Seleccionar materia</option>';
            
            // Limpiar container de materias y agregar texto de instrucción
            materiasContainer.innerHTML = '<p class="text-sm text-gray-500">Primero selecciona una materia para ver las previas disponibles:</p>';
            
            console.log('📝 Procesando', materias.length, 'materias...');
            
            materias.forEach((materia, index) => {
                console.log(`📚 Materia ${index + 1}:`, materia);
                // Agregar al select principal
                const option = document.createElement('option');
                option.value = materia._id;
                option.textContent = `${materia.codigo} - ${materia.nombre}`;
                selectMateria.appendChild(option);
            });
            
            // Agregar event listener para cuando cambie la materia principal
            selectMateria.addEventListener('change', function() {
                actualizarMateriasDisponibles(this.value);
            });
        }
        
        function actualizarMateriasDisponibles(materiaId) {
            console.log('🔄 Actualizando materias disponibles para:', materiaId);
            const materiasContainer = document.getElementById('materias-container');
            
            if (!materiaId) {
                materiasContainer.innerHTML = '<p class="text-sm text-gray-500">Primero selecciona una materia para ver las previas disponibles:</p>';
                return;
            }
            
            // Encontrar la materia seleccionada
            const materiaSeleccionada = materias.find(m => m._id === materiaId);
            if (!materiaSeleccionada) {
                console.error('❌ Materia seleccionada no encontrada');
                return;
            }
            
            console.log('📚 Materia seleccionada:', materiaSeleccionada);
            
            // Filtrar materias que pueden ser previas:
            // 1. No puede ser la misma materia
            // 2. Debe ser de un semestre anterior
            const materiasDisponibles = materias.filter(materia => {
                // No puede ser la misma materia
                if (materia._id === materiaId) {
                    return false;
                }
                
                // Si no tiene semestre, no se puede comparar
                if (!materia.semestre || !materiaSeleccionada.semestre) {
                    return false;
                }
                
                // Comparar semestres (asumiendo que tienen un campo 'numero' o similar)
                const semestreMateria = materia.semestre.numero || materia.semestre.orden || 0;
                const semestreSeleccionada = materiaSeleccionada.semestre.numero || materiaSeleccionada.semestre.orden || 0;
                
                console.log(`📊 Comparando semestres: ${materia.codigo} (${semestreMateria}) vs ${materiaSeleccionada.codigo} (${semestreSeleccionada})`);
                
                return semestreMateria < semestreSeleccionada;
            });
            
            console.log('✅ Materias disponibles como previas:', materiasDisponibles.length);
            
            // Limpiar container
            materiasContainer.innerHTML = '<p class="text-sm text-gray-500">Selecciona las materias y su tipo de requisito:</p>';
            
            if (materiasDisponibles.length === 0) {
                materiasContainer.innerHTML += '<p class="text-sm text-amber-600 mt-2">No hay materias de semestres anteriores disponibles como previas.</p>';
                return;
            }
            
            // Crear checkboxes para materias disponibles
            materiasDisponibles.forEach((materia, index) => {
                console.log(`📚 Agregando materia disponible ${index + 1}:`, materia);
                
                const materiaDiv = document.createElement('div');
                materiaDiv.className = 'materia-row flex items-center justify-between p-3 bg-gray-50 rounded-lg border border-gray-200 hover:bg-gray-100 transition-colors';
                materiaDiv.innerHTML = `
                    <div class="flex items-center space-x-3">
                        <input type="checkbox" 
                               id="materia-${materia._id}" 
                               class="materia-checkbox form-checkbox" 
                               data-materia-id="${materia._id}"
                               data-materia-codigo="${materia.codigo}"
                               data-materia-nombre="${materia.nombre}">
                        <label for="materia-${materia._id}" class="text-sm font-medium text-gray-900 cursor-pointer">
                            ${materia.codigo} - ${materia.nombre}
                            <span class="text-xs text-gray-500 ml-2">(${materia.semestre?.nombre || 'Sin semestre'})</span>
                        </label>
                    </div>
                    <select class="tipo-requisito form-select text-sm w-32" disabled>
                        <option value="curso_aprobado">Curso</option>
                        <option value="examen_aprobado">Examen</option>
                    </select>
                `;
                
                materiasContainer.appendChild(materiaDiv);
            });
            
            // Agregar event listeners para los checkboxes
            agregarEventListenersMaterias();
        }
        
        function agregarEventListenersMaterias() {
            const checkboxes = document.querySelectorAll('.materia-checkbox');
            checkboxes.forEach(checkbox => {
                checkbox.addEventListener('change', function() {
                    const selectTipo = this.parentElement.parentElement.querySelector('.tipo-requisito');
                    if (this.checked) {
                        selectTipo.disabled = false;
                        selectTipo.classList.remove('opacity-50');
                    } else {
                        selectTipo.disabled = true;
                        selectTipo.classList.add('opacity-50');
                    }
                });
            });
        }

        function actualizarEstadisticas() {
            const total = previas.length;
            const activas = previas.filter(p => p.activa).length;
            const porCurso = previas.filter(p => p.tipo === 'curso_aprobado').length;
            const porExamen = previas.filter(p => p.tipo === 'examen_aprobado').length;
            
            // Calcular estadísticas de materias únicas
            const materiasUnicas = agruparPreviasPorMateria(previas);
            const materiasConPrevias = materiasUnicas.length;
            
            document.getElementById('total-previas-count').textContent = materiasConPrevias;
            document.getElementById('previas-activas-count').textContent = materiasUnicas.filter(g => g.activa).length;
            document.getElementById('previas-curso-count').textContent = porCurso;
            document.getElementById('previas-examen-count').textContent = porExamen;
            document.getElementById('total-previas').textContent = `${materiasConPrevias} materias con previas`;
        }

        function mostrarPrevias() {
            const tbody = document.getElementById('previas-tbody');
            
            if (previasFiltradas.length === 0) {
                tbody.innerHTML = `
                    <tr>
                        <td colspan="6" class="px-6 py-12 text-center">
                            <div class="flex flex-col items-center">
                                <i class="fas fa-inbox text-4xl text-slate-400 mb-4"></i>
                                <p class="text-slate-500">No se encontraron previas</p>
                            </div>
                        </td>
                    </tr>
                `;
                return;
            }
            
            // Agrupar previas por materia
            const previasAgrupadas = agruparPreviasPorMateria(previasFiltradas);
            
            const inicio = (paginaActual - 1) * previasPorPagina;
            const fin = inicio + previasPorPagina;
            const previasPagina = previasAgrupadas.slice(inicio, fin);
            
            tbody.innerHTML = previasPagina.map(grupo => `
                <tr class="hover:bg-slate-50">
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <div class="w-2 h-2 bg-emerald-500 rounded-full mr-3"></div>
                            <div>
                                <div class="text-sm font-medium text-slate-900">${grupo.materia?.nombre || 'N/A'}</div>
                                <div class="text-sm text-slate-500">${grupo.materia?.codigo || 'N/A'}</div>
                            </div>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center justify-between">
                            <span class="text-sm text-slate-600">${grupo.totalPrevias} previa${grupo.totalPrevias !== 1 ? 's' : ''}</span>
                            <button class="btn-icon btn-icon-primary btn-ver-previas" 
                                    data-materia-id="${grupo.materia._id}"
                                    data-previas='${JSON.stringify(grupo.previas)}'
                                    title="Ver previas detalladas">
                                <i class="fas fa-eye"></i>
                            </button>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="space-y-1">
                            ${Array.from(grupo.tipos).map(tipo => `
                                <span class="inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${
                                    tipo === 'curso_aprobado' 
                                        ? 'bg-emerald-100 text-emerald-800' 
                                        : 'bg-violet-100 text-violet-800'
                                }">
                                    <i class="fas fa-${tipo === 'curso_aprobado' ? 'graduation-cap' : 'file-alt'} mr-1"></i>
                                    ${tipo === 'curso_aprobado' ? 'Curso' : 'Examen'}
                                </span>
                            `).join('')}
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                            grupo.activa 
                                ? 'bg-emerald-100 text-emerald-800' 
                                : 'bg-red-100 text-red-800'
                        }">
                            <i class="fas fa-${grupo.activa ? 'check-circle' : 'times-circle'} mr-1"></i>
                            ${grupo.activa ? 'Activa' : 'Inactiva'}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center justify-between">
                            <span class="text-sm text-slate-600">${grupo.materia.semestre || 'N/A'}</span>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center space-x-2">
                            <button class="btn-icon btn-icon-primary btn-editar-previa" 
                                    data-materia-id="${grupo.materia._id}" title="Editar">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn-icon ${grupo.activa ? 'btn-icon-warning' : 'btn-icon-success'} btn-toggle-previa" 
                                    data-materia-id="${grupo.materia._id}"
                                    data-estado="${grupo.activa}"
                                    title="${grupo.activa ? 'Desactivar' : 'Activar'}">
                                <i class="fas fa-${grupo.activa ? 'pause' : 'play'}"></i>
                            </button>
                            <button class="btn-icon btn-icon-danger btn-eliminar-previa" 
                                    data-materia-id="${grupo.materia._id}" title="Eliminar">
                                <i class="fas fa-trash"></i>
                            </button>
                        </div>
                    </td>
                </tr>
            `).join('');
            
            actualizarPaginacion();
        }

        function actualizarPaginacion() {
            const materiasAgrupadas = agruparPreviasPorMateria(previasFiltradas);
            const totalPaginas = Math.ceil(materiasAgrupadas.length / previasPorPagina);
            const paginationContainer = document.getElementById('pagination-container');
            const paginationInfo = document.getElementById('pagination-info');
            const prevButton = document.getElementById('prev-page');
            const nextButton = document.getElementById('next-page');
            const pageNumbers = document.getElementById('page-numbers');
            
            if (totalPaginas <= 1) {
                paginationContainer.style.display = 'none';
                return;
            }
            
            paginationContainer.style.display = 'block';
            
            // Calcular rangos para mostrar
            const startItem = (paginaActual - 1) * previasPorPagina + 1;
            const endItem = Math.min(paginaActual * previasPorPagina, materiasAgrupadas.length);
            
            // Actualizar información de paginación
            paginationInfo.textContent = `Mostrando ${startItem}-${endItem} de ${materiasAgrupadas.length} materias con previas`;
            
            // Actualizar botones
            prevButton.disabled = paginaActual === 1;
            nextButton.disabled = paginaActual === totalPaginas;
            
            // Generar números de página
            generarNumerosPagina(pageNumbers, paginaActual, totalPaginas);
        }

        function cambiarPagina(direccion) {
            const materiasAgrupadas = agruparPreviasPorMateria(previasFiltradas);
            const totalPaginas = Math.ceil(materiasAgrupadas.length / previasPorPagina);
            const nuevaPagina = paginaActual + direccion;
            
            if (nuevaPagina >= 1 && nuevaPagina <= totalPaginas) {
                paginaActual = nuevaPagina;
                mostrarPrevias();
            }
        }

        function irAPagina(numeroPagina) {
            const materiasAgrupadas = agruparPreviasPorMateria(previasFiltradas);
            const totalPaginas = Math.ceil(materiasAgrupadas.length / previasPorPagina);
            
            if (numeroPagina >= 1 && numeroPagina <= totalPaginas) {
                paginaActual = numeroPagina;
                mostrarPrevias();
            }
        }

        function generarNumerosPagina(container, paginaActual, totalPaginas) {
            container.innerHTML = '';
            
            // Mostrar máximo 5 páginas alrededor de la actual
            let inicio = Math.max(1, paginaActual - 2);
            let fin = Math.min(totalPaginas, paginaActual + 2);
            
            // Ajustar para mostrar siempre 5 páginas si es posible
            if (fin - inicio < 4) {
                if (inicio === 1) {
                    fin = Math.min(totalPaginas, inicio + 4);
                } else {
                    inicio = Math.max(1, fin - 4);
                }
            }
            
            // Agregar primera página si no está incluida
            if (inicio > 1) {
                const firstPage = document.createElement('button');
                firstPage.textContent = '1';
                firstPage.className = 'px-3 py-1 text-sm bg-white border border-slate-300 rounded-md hover:bg-slate-50 btn-pagina-numero';
                firstPage.setAttribute('data-pagina', '1');
                container.appendChild(firstPage);
                
                if (inicio > 2) {
                    const ellipsis = document.createElement('span');
                    ellipsis.textContent = '...';
                    ellipsis.className = 'px-2 py-1 text-slate-500';
                    container.appendChild(ellipsis);
                }
            }
            
            // Generar números de página
            for (let i = inicio; i <= fin; i++) {
                const pageButton = document.createElement('button');
                pageButton.textContent = i;
                pageButton.className = `px-3 py-1 text-sm border rounded-md btn-pagina-numero ${i === paginaActual ? 'bg-emerald-500 text-white border-emerald-500' : 'bg-white border-slate-300 hover:bg-slate-50'}`;
                pageButton.setAttribute('data-pagina', i.toString());
                container.appendChild(pageButton);
            }
            
            // Agregar última página si no está incluida
            if (fin < totalPaginas) {
                if (fin < totalPaginas - 1) {
                    const ellipsis = document.createElement('span');
                    ellipsis.textContent = '...';
                    ellipsis.className = 'px-2 py-1 text-slate-500';
                    container.appendChild(ellipsis);
                }
                
                const lastPage = document.createElement('button');
                lastPage.textContent = totalPaginas;
                lastPage.className = 'px-3 py-1 text-sm bg-white border border-slate-300 rounded-md hover:bg-slate-50 btn-pagina-numero';
                lastPage.setAttribute('data-pagina', totalPaginas.toString());
                container.appendChild(lastPage);
            }
        }

        // Función para agrupar previas por materia
        function agruparPreviasPorMateria(previas) {
            console.log('🔍 Previas recibidas para agrupar:', previas);
            const grupos = {};
            
            previas.forEach(previa => {
                console.log('📚 Procesando previa:', previa);
                console.log('🏫 Materia:', previa.materia);
                console.log('📅 Semestre de la materia:', previa.materia?.semestre);
                
                const materiaId = previa.materia._id || previa.materia;
                const materiaNombre = previa.materia.nombre || 'N/A';
                const materiaCodigo = previa.materia.codigo || 'N/A';
                const materiaSemestre = previa.materia.semestre?.nombre || 'N/A';
                
                console.log('✅ Datos extraídos:', {
                    id: materiaId,
                    nombre: materiaNombre,
                    codigo: materiaCodigo,
                    semestre: materiaSemestre,
                    semestreOriginal: previa.materia.semestre
                });
                
                if (!grupos[materiaId]) {
                    grupos[materiaId] = {
                        materia: {
                            _id: materiaId,
                            nombre: materiaNombre,
                            codigo: materiaCodigo,
                            semestre: materiaSemestre
                        },
                        previas: [],
                        totalPrevias: 0,
                        tipos: new Set(),
                        creditosMinimos: 0,
                        activa: true,
                        semestreMinimo: null
                    };
                }
                
                // Agregar previa al grupo
                grupos[materiaId].previas.push({
                    materiaRequerida: previa.materiaRequerida,
                    tipo: previa.tipo,
                    notaMinima: previa.notaMinima,
                    semestreMinimo: previa.semestreMinimo,
                    creditosMinimos: previa.creditosMinimos,
                    activa: previa.activa
                });
                
                // Actualizar contadores y valores
                grupos[materiaId].totalPrevias++;
                grupos[materiaId].tipos.add(previa.tipo);
                grupos[materiaId].creditosMinimos = Math.max(grupos[materiaId].creditosMinimos, previa.creditosMinimos);
                grupos[materiaId].activa = grupos[materiaId].activa && previa.activa;
                grupos[materiaId].semestreMinimo = Math.max(grupos[materiaId].semestreMinimo, previa.semestreMinimo);
            });
            
            console.log('🏗️ Grupos creados:', grupos);
            
            // Convertir a array y ordenar
            return Object.values(grupos).sort((a, b) => a.materia.codigo.localeCompare(b.materia.codigo));
        }

        function filtrarPrevias() {
            const searchTerm = document.getElementById('search-previas').value.toLowerCase();
            const tipoFilter = document.getElementById('filter-tipo').value;
            const estadoFilter = document.getElementById('filter-estado').value;
            
            previasFiltradas = previas.filter(previa => {
                const matchSearch = !searchTerm || 
                    previa.materia?.nombre?.toLowerCase().includes(searchTerm) ||
                    previa.materia?.codigo?.toLowerCase().includes(searchTerm) ||
                    previa.materiaRequerida?.nombre?.toLowerCase().includes(searchTerm) ||
                    previa.materiaRequerida?.codigo?.toLowerCase().includes(searchTerm);
                
                const matchTipo = !tipoFilter || previa.tipo === tipoFilter;
                const matchEstado = !estadoFilter || previa.activa.toString() === estadoFilter;
                
                return matchSearch && matchTipo && matchEstado;
            });
            
            paginaActual = 1;
            mostrarPrevias();
        }

        function limpiarFiltros() {
            document.getElementById('search-previas').value = '';
            document.getElementById('filter-tipo').value = '';
            document.getElementById('filter-estado').value = '';
            filtrarPrevias();
        }

        function aplicarFiltros() {
            filtrarPrevias();
        }



        function mostrarModalCrearPrevia() {
            document.getElementById('modal-title').textContent = 'Nueva Previa';
            document.getElementById('form-previa').reset();
            document.getElementById('modal-previa').classList.remove('hidden');
        }

        function cerrarModalPrevia() {
            document.getElementById('modal-previa').classList.add('hidden');
        }

        function verPreviasDetalle(materiaId) {
            const modal = document.getElementById('modal-previas-detalle');
            const titulo = document.getElementById('modal-previas-titulo');
            const content = document.getElementById('previas-detalle-content');
            
            // Buscar el botón correspondiente a esta materia
            const button = document.querySelector(`[data-materia-id="${materiaId}"].btn-ver-previas`);
            
            if (!button) {
                console.error('No se encontró el botón para la materia:', materiaId);
                return;
            }
            
            const previasData = button.getAttribute('data-previas');
            const previas = JSON.parse(previasData);
            
            // Buscar la materia para mostrar su nombre
            const materia = materias.find(m => m._id === materiaId);
            
            titulo.textContent = `Previas Requeridas: ${materia ? materia.nombre : 'N/A'}`;
            
            // Generar el contenido HTML para las previas
            content.innerHTML = previas.map(previa => `
                <div class="bg-slate-50 rounded-lg p-4 border border-slate-200">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <h4 class="font-semibold text-slate-900 mb-2">Materia Requerida</h4>
                            <div class="flex items-center space-x-3">
                                <div class="w-3 h-3 bg-amber-500 rounded-full"></div>
                                <div>
                                    <div class="font-medium text-slate-900">${previa.materiaRequerida?.nombre || 'N/A'}</div>
                                    <div class="text-sm text-slate-500">${previa.materiaRequerida?.codigo || 'N/A'}</div>
                                </div>
                            </div>
                        </div>
                        <div>
                            <h4 class="font-semibold text-slate-900 mb-2">Requisitos</h4>
                            <div class="space-y-2">
                                <div class="flex items-center justify-between">
                                    <span class="text-sm text-slate-600">Tipo:</span>
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                        previa.tipo === 'curso_aprobado' 
                                            ? 'bg-emerald-100 text-emerald-800' 
                                            : 'bg-violet-100 text-violet-800'
                                    }">
                                        <i class="fas fa-${previa.tipo === 'curso_aprobado' ? 'graduation-cap' : 'file-alt'} mr-1"></i>
                                        ${previa.tipo === 'curso_aprobado' ? 'Curso Aprobado' : 'Examen Aprobado'}
                                    </span>
                                </div>

                                ${previa.creditosMinimos ? `
                                    <div class="flex items-center justify-between">
                                        <span class="text-sm text-slate-600">Créditos Mínimos:</span>
                                        <span class="font-medium text-slate-900">${previa.creditosMinimos}</span>
                                    </div>
                                ` : ''}
                                <div class="flex items-center justify-between">
                                    <span class="text-sm text-slate-600">Estado:</span>
                                    <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${
                                        previa.activa 
                                            ? 'bg-emerald-100 text-emerald-800' 
                                            : 'bg-red-100 text-red-800'
                                    }">
                                        <i class="fas fa-${previa.activa ? 'check-circle' : 'times-circle'} mr-1"></i>
                                        ${previa.activa ? 'Activa' : 'Inactiva'}
                                    </span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `).join('');
            
            modal.classList.remove('hidden');
            
            // Agregar evento para cerrar con Escape
            handleEscape = (e) => {
                if (e.key === 'Escape') {
                    cerrarModalPreviasDetalle();
                }
            };
            document.addEventListener('keydown', handleEscape);
        }

        function cerrarModalPreviasDetalle() {
            document.getElementById('modal-previas-detalle').classList.add('hidden');
            
            // Limpiar eventos de teclado
            if (handleEscape) {
                document.removeEventListener('keydown', handleEscape);
                handleEscape = null;
            }
        }



        function abrirModalPrevia() {
            document.getElementById('modal-title').textContent = 'Nueva Previa';
            document.getElementById('form-previa').reset();
            delete document.getElementById('form-previa').dataset.previaId; // Limpiar ID de edición
            
            // Limpiar el container de materias
            const materiasContainer = document.getElementById('materias-container');
            materiasContainer.innerHTML = '<p class="text-sm text-gray-500">Primero selecciona una materia para ver las previas disponibles:</p>';
            
            document.getElementById('modal-previa').classList.remove('hidden');
        }

        function cerrarModalPrevia() {
            document.getElementById('modal-previa').classList.add('hidden');
            document.getElementById('form-previa').reset();
            delete document.getElementById('form-previa').dataset.previaId;
            
            // Limpiar el container de materias
            const materiasContainer = document.getElementById('materias-container');
            materiasContainer.innerHTML = '<p class="text-sm text-gray-500">Primero selecciona una materia para ver las previas disponibles:</p>';
        }

        async function editarPrevia(materiaId) {
            try {
                // Obtener datos de todas las previas de la materia
                const response = await fetch(`/admin/api/previas/materia/${materiaId}`);
                const previas = await response.json();
                
                if (response.ok && previas && previas.length > 0) {
                    // Usar la primera previa para obtener la información de la materia
                    const primeraPrevia = previas[0];
                    
                    // Llenar el formulario con los datos de la previa
                    document.getElementById('modal-title').textContent = 'Editar Previas';
                    document.getElementById('materia').value = primeraPrevia.materia?._id || '';
                    
                    // Cargar las materias disponibles para esta materia
                    actualizarMateriasDisponibles(primeraPrevia.materia?._id);
                    
                    // Esperar un poco para que se carguen las materias disponibles
                    setTimeout(() => {
                        // Seleccionar todas las materias requeridas en los checkboxes
                        previas.forEach(previa => {
                            if (previa.materiaRequerida?._id) {
                                const checkbox = document.getElementById(`materia-${previa.materiaRequerida._id}`);
                                if (checkbox) {
                                    checkbox.checked = true;
                                    const selectTipo = checkbox.parentElement.parentElement.querySelector('.tipo-requisito');
                                    selectTipo.disabled = false;
                                    selectTipo.classList.remove('opacity-50');
                                    selectTipo.value = previa.tipo || 'curso_aprobado';
                                }
                            }
                        });
                        
                        // Usar el estado de la primera previa para el checkbox general
                        document.getElementById('activa').checked = primeraPrevia.activa || false;
                    }, 100);
                    
                    // Mostrar modal
                    document.getElementById('modal-previa').classList.remove('hidden');
                    
                    // Cambiar el comportamiento del formulario para edición
                    const form = document.getElementById('form-previa');
                    form.dataset.materiaId = materiaId; // Usar materiaId en lugar de previaId individual
                } else {
                    Swal.fire({
                        title: 'Error',
                        text: 'No se encontraron previas para editar',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                }
            } catch (error) {
                console.error('Error cargando previas:', error);
                Swal.fire({
                    title: 'Error',
                    text: 'Error al cargar los datos de las previas',
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        }

        document.getElementById('form-previa').addEventListener('submit', async function(e) {
            e.preventDefault();
            
            const formData = new FormData(this);
            
            // Recopilar materias seleccionadas con sus tipos
            const materiasSeleccionadas = [];
            const checkboxes = document.querySelectorAll('.materia-checkbox:checked');
            
            checkboxes.forEach(checkbox => {
                const materiaId = checkbox.getAttribute('data-materia-id');
                const selectTipo = checkbox.parentElement.parentElement.querySelector('.tipo-requisito');
                const tipo = selectTipo.value;
                
                materiasSeleccionadas.push({
                    materiaId: materiaId,
                    tipo: tipo
                });
            });
            
            const previaId = this.dataset.previaId;
            const materiaId = this.dataset.materiaId;
            const isEditing = !!previaId || !!materiaId;
            
            const data = {
                materiasRequeridas: materiasSeleccionadas,
                activa: formData.get('activa') === 'on'
            };
            
            // Solo agregar materia si no estamos editando múltiples previas
            if (!materiaId) {
                data.materia = formData.get('materia');
            }
            
            console.log('📤 Datos que se enviarán:', data);
            console.log('📋 Materias seleccionadas:', materiasSeleccionadas);
            
            try {
                let url, method;
                if (isEditing && materiaId) {
                    // Edición de múltiples previas de una materia
                    url = `/admin/api/previas/materia/${materiaId}`;
                    method = 'PUT';
                } else if (isEditing && previaId) {
                    // Edición de una previa individual
                    url = `/admin/api/previas/${previaId}`;
                    method = 'PUT';
                } else {
                    // Creación de nueva previa
                    url = '/admin/api/previas';
                    method = 'POST';
                }
                
                const response = await fetch(url, {
                    method: method,
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(data),
                    credentials: 'same-origin'
                });
                
                if (!response.ok) {
                    const errorData = await response.json();
                    throw new Error(errorData.message || `Error del servidor: ${response.status}`);
                }
                
                const previa = await response.json();
                console.log(isEditing ? 'Previa actualizada:' : 'Previa creada:', previa);
                
                // Mostrar mensaje de éxito con SweetAlert2
                await Swal.fire({
                    title: isEditing ? '¡Actualizada!' : '¡Creada!',
                    text: `La previa fue ${isEditing ? 'actualizada' : 'creada'} exitosamente`,
                    icon: 'success',
                    confirmButtonText: 'OK',
                    timer: 2000,
                    timerProgressBar: true
                });
                
                cerrarModalPrevia();
                cargarPrevias();
                
            } catch (error) {
                console.error(`Error ${isEditing ? 'actualizando' : 'creando'} previa:`, error);
                
                await Swal.fire({
                    title: 'Error',
                    text: `No se pudo ${isEditing ? 'actualizar' : 'crear'} la previa: ${error.message}`,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        });

        async function togglePrevia(id, estadoActual) {
            try {
                const response = await fetch(`/admin/api/previas/${id}`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ activa: !estadoActual }),
                    credentials: 'same-origin'
                });
                
                if (!response.ok) {
                    throw new Error(`Error del servidor: ${response.status}`);
                }
                
                mostrarNotificacion('Éxito', `Previa ${!estadoActual ? 'activada' : 'desactivada'} correctamente`);
                cargarPrevias();
                
            } catch (error) {
                console.error('Error cambiando estado de previa:', error);
                mostrarError('Error cambiando estado: ' + error.message);
            }
        }

        async function eliminarPrevia(materiaId) {
            try {
                // Obtener datos de la previa para mostrar en la confirmación
                const response = await fetch(`/admin/api/previas/materia/${materiaId}`);
                const previa = await response.json();
                
                if (!response.ok || !previa) {
                    await Swal.fire({
                        title: 'Error',
                        text: 'No se encontró la previa para eliminar',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                    return;
                }
                
                // Mostrar confirmación con SweetAlert2
                const result = await Swal.fire({
                    title: '¿Eliminar previa?',
                    html: `
                        <div style="text-align: center; padding: 20px;">
                            <div style="background: linear-gradient(135deg, #ff6b6b, #ee5a52); width: 80px; height: 80px; border-radius: 50%; display: flex; align-items: center; justify-content: center; margin: 0 auto 20px; box-shadow: 0 8px 25px rgba(255, 107, 107, 0.3);">
                                <i class="fas fa-trash" style="color: white; font-size: 32px;"></i>
                            </div>
                            <h3 style="color: #1e293b; font-size: 18px; font-weight: 600; margin-bottom: 10px;">${previa.materia?.nombre || 'Previa'}</h3>
                            <p style="color: #64748b; font-size: 14px; margin-bottom: 20px;">Esta acción no se puede deshacer</p>
                        </div>
                    `,
                    showCancelButton: true,
                    confirmButtonText: 'Sí, eliminar',
                    cancelButtonText: 'Cancelar',
                    confirmButtonColor: '#ef4444',
                    cancelButtonColor: '#6b7280',
                    customClass: {
                        popup: 'swal2-popup-modern',
                        title: 'swal2-title-modern',
                        htmlContainer: 'swal2-html-container-modern',
                        confirmButton: 'swal2-confirm-modern',
                        cancelButton: 'swal2-cancel-modern'
                    }
                });
                
                if (result.isConfirmed) {
                    // Mostrar loading
                    Swal.fire({
                        title: 'Eliminando...',
                        text: 'Por favor espera',
                        allowOutsideClick: false,
                        showConfirmButton: false,
                        willOpen: () => {
                            Swal.showLoading();
                        }
                    });
                    
                    // Realizar la eliminación
                    const deleteResponse = await fetch(`/admin/api/previas/${previa._id}`, {
                        method: 'DELETE',
                        credentials: 'same-origin'
                    });
                    
                    if (!deleteResponse.ok) {
                        const errorData = await deleteResponse.json();
                        throw new Error(errorData.message || `Error del servidor: ${deleteResponse.status}`);
                    }
                    
                    // Mostrar éxito
                    await Swal.fire({
                        title: '¡Eliminada!',
                        text: 'La previa fue eliminada exitosamente',
                        icon: 'success',
                        confirmButtonText: 'OK',
                        timer: 2000,
                        timerProgressBar: true
                    });
                    
                    // Recargar datos
                    await cargarPrevias();
                }
                
            } catch (error) {
                console.error('Error eliminando previa:', error);
                
                await Swal.fire({
                    title: 'Error',
                    text: `No se pudo eliminar la previa: ${error.message}`,
                    icon: 'error',
                    confirmButtonText: 'OK'
                });
            }
        }

        function mostrarNotificacion(titulo, mensaje) {
            const notificacion = document.createElement('div');
            notificacion.className = 'fixed top-4 right-4 bg-white border-l-4 border-emerald-500 shadow-lg rounded-lg p-4 z-50 max-w-sm transform transition-all duration-300 ease-in-out';
            notificacion.style.transform = 'translateX(100%)';
            notificacion.innerHTML = `
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-check-circle text-emerald-500"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium text-slate-900">${titulo}</p>
                        <p class="text-sm text-slate-500">${mensaje}</p>
                    </div>
                    <div class="ml-auto pl-3">
                        <button class="btn-cerrar-notificacion text-slate-400 hover:text-slate-600">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            `;
            
            // Agregar event listener para el botón de cerrar
            const cerrarBtn = notificacion.querySelector('.btn-cerrar-notificacion');
            cerrarBtn.addEventListener('click', () => {
                notificacion.remove();
            });
            
            document.body.appendChild(notificacion);
            
            setTimeout(() => {
                notificacion.style.transform = 'translateX(0)';
            }, 100);
            
            setTimeout(() => {
                if (notificacion.parentElement) {
                    notificacion.style.transform = 'translateX(100%)';
                    setTimeout(() => {
                        if (notificacion.parentElement) {
                            notificacion.remove();
                        }
                    }, 300);
                }
            }, 5000);
        }

        function mostrarError(mensaje) {
            const notificacion = document.createElement('div');
            notificacion.className = 'fixed top-4 right-4 bg-white border-l-4 border-red-500 shadow-lg rounded-lg p-4 z-50 max-w-sm transform transition-all duration-300 ease-in-out';
            notificacion.style.transform = 'translateX(100%)';
            notificacion.innerHTML = `
                <div class="flex items-center">
                    <div class="flex-shrink-0">
                        <i class="fas fa-exclamation-triangle text-red-500"></i>
                    </div>
                    <div class="ml-3">
                        <p class="text-sm font-medium text-slate-900">Error</p>
                        <p class="text-sm text-slate-500">${mensaje}</p>
                    </div>
                    <div class="ml-auto pl-3">
                        <button class="btn-cerrar-notificacion text-slate-400 hover:text-slate-600">
                            <i class="fas fa-times"></i>
                        </button>
                    </div>
                </div>
            `;
            
            // Agregar event listener para el botón de cerrar
            const cerrarBtn = notificacion.querySelector('.btn-cerrar-notificacion');
            cerrarBtn.addEventListener('click', () => {
                notificacion.remove();
            });
            
            document.body.appendChild(notificacion);
            
            setTimeout(() => {
                notificacion.style.transform = 'translateX(0)';
            }, 100);
            
            setTimeout(() => {
                if (notificacion.parentElement) {
                    notificacion.style.transform = 'translateX(100%)';
                    setTimeout(() => {
                        if (notificacion.parentElement) {
                            notificacion.remove();
                        }
                    }, 300);
                }
            }, 5000);
        }
    </script>
</body>
</html> 